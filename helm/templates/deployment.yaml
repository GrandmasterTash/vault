apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    {{- include "vault.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "vault.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "vault.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Chart.Name }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: MONGO_URI
            value: "{{ .Values.mongo.uri }}"
          - name: KAFKA_SERVERS
            value: "{{ .Values.kafka.servers }}"
          ports:
            - name: grpc
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          readinessProbe:
            exec:
              command: ["/grpc_health_probe", "-addr=:{{ .Values.service.port }}", "-tls", "-tls-no-verify", "-service=READINESS"]
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 1
            successThreshold: 1
          livenessProbe:
            exec:
              command: ["/grpc_health_probe", "-addr=:{{ .Values.service.port }}", "-tls", "-tls-no-verify", "-service=LIVELINESS"]
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
            # TODO: Pull from values.yaml
          resources:
            limits:
              cpu: "500m"
              memory: "150Mi"
            requests:
              cpu: "200m"
              memory: "50Mi"
          volumeMounts:
          - name: certs
            mountPath: "/certs"
            readOnly: true
          - name: secrets
            mountPath: "/secrets"
            readOnly: true
      volumes:
      - name: certs
        secret:
          secretName: vault-tls
          items:
          # produces /certs/cert.pem in the container.
          - key: tls.crt
            path: cert.pem
          # produces /certs/key.pem in the container.
          - key: tls.key
            path: key.pem
      - name: secrets
        secret:
          secretName: vault-secrets
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
