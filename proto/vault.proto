syntax = "proto3";
import "common.proto";
package grpc.vault;

// TODO: gRPC over TLS? All these calls should be using that really.
// TODO: Arbtrary password 'types'. Active policy per type. That would support PINs and passwords.

service Vault {
    // TODO: Document (one password type is introduced).
    // Maintenance orientated.
    // TODO: Doc that active policy has eventual consistency.
    rpc CreatePasswordPolicy (CreatePolicyRequest) returns (CreatePolicyResponse) {}
    rpc GetActivePolicy (common.Empty) returns (GetActivePolicyResponse) {}
    // TODO: Doc that active policy has eventual consistency.
    rpc MakeActive (MakeActiveRequest) returns (common.Empty) {}
    rpc GetPolicies (common.Empty) returns (GetPoliciesResponse) {}
    rpc ImportPasswords (stream ImportPasswordRequest) returns (stream ImportPasswordResponse) {}
    rpc InvalidatePassword (InvalidateRequest) returns (common.Empty) {} // Mark a password as needing to be changed
    rpc DeletePassword (DeleteRequest) returns (DeleteResponse) {}
    rpc DeletePasswords (stream DeleteRequest) returns (stream DeleteResponse) {}

    // User orientated (never expose to direct clients though!).
    rpc HashPassword (HashRequest) returns (HashResponse) {} // Create or overwrite an existing password.
    rpc ValidatePassword (ValidateRequest) returns (ValidateResponse) {}
    rpc ChangePassword (ChangeRequest) returns (common.Empty) {} // when existing is known but must be rotated or is no-longer valid.
    rpc StartResetPassword (StartResetRequest) returns (StartResetResponse) {} // 2-phase for when existing is forgotten.
    rpc CompleteResetPassword (CompleteResetRequest) returns (common.Empty) {}

}

message CreatePolicyRequest {
    Policy policy = 1;
    bool activate = 2;
}

message Policy {
    string policy_id = 1;            // Generated when created.
    uint32 max_history_length = 2;   // How many passwords to store in history to prevent re-use of old ones.
    uint32 max_age_days = 3;         // Passwords will expire after this period and must be changed.
    uint32 min_length = 4;           // Minimum number of characters allowed.
    uint32 max_length = 5;           // Maximum number of characters allowed.
    uint32 max_character_repeat = 6; // Maximum number of times any given character can be used. For example, If 1, 'loopy' is prohibited but 'lopy' is allowed.
    uint32 min_letters = 7;
    uint32 max_letters = 8;
    uint32 min_numbers = 9;
    uint32 max_numbers = 10;
    uint32 min_symbols = 11;
    uint32 max_symbols = 12;
    uint32 max_failures = 13;
    uint32 lockout_seconds = 14;
    bool mixed_case_required = 15;
    uint32 reset_timeout_seconds = 16;
    oneof algorthm {
        ArgonPolicy argon_policy = 17;
        BCryptPolicy bcrypt_policy = 18;
        PBKDF2Policy pbkfd2_policy = 19;
    }
    repeated string prohibited_phrases = 20;
    uint64 created_on = 21;

}

// https://en.wikipedia.org/wiki/Argon2
message ArgonPolicy {
    uint32 parallelism = 1;
    uint32 tag_length = 2;
    uint32 memory_size_kb = 3;
    uint32 iterations = 4;
    uint32 version = 5;
    enum HashType {
        ARGON2D = 0;
        ARGON2I = 1;
        ARGON2ID = 2;
    }
    HashType hash_type = 6;
}

// https://en.wikipedia.org/wiki/Bcrypt
message BCryptPolicy {
    enum BCryptVersion {
        TWOA = 0;
        TWOX = 1;
        TWOY = 2;
        TWOB = 3;
    }
    BCryptVersion version = 1;
    uint32 cost = 2;
}

// https://en.wikipedia.org/wiki/PBKDF2
message PBKDF2Policy {
    uint32 cost = 1;
}

message CreatePolicyResponse {
    string policy_id = 1;
}

message MakeActiveRequest {
    string policy_id = 1;
}

message GetPoliciesResponse {
    string active_policy_id = 1;
    uint64 activated_on = 2;
    repeated Policy policies = 3;
}

message GetActivePolicyResponse {
    Policy policy = 1;
    uint64 activated_on = 2;
}

message ImportPasswordRequest {
    oneof password {
        string plain_text_password = 1;
        string phc_string = 2;
    }
}

message ImportPasswordResponse {
    oneof result {
        string password_id = 1;
        string failure_message = 2;
    }
}

message HashRequest {
    string plain_text_password = 1;
    optional string password_id = 2;
}

message HashResponse {
    string password_id = 1;
}

message ValidateRequest {
    string password_id = 1;
    string plain_text_password = 2;
}

message ValidateResponse {
    bool must_change = 1;
}

message InvalidateRequest {
    string password_id = 1;
}

message ChangeRequest {
    string plain_text_password = 1;
    string new_plain_text_password = 2;
    optional string password_id = 3;
}

message StartResetRequest {
    string password_id = 1;
}

message StartResetResponse {
    string reset_code = 1;
}

message CompleteResetRequest {
    string password_id = 1;
    string reset_code = 2;
    string plain_text_password = 3;
}

message DeleteRequest {
    string password_id = 1;
}

message DeleteResponse {
    bool deleted = 1;
}